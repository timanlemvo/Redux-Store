{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","assets/spinner.gif","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","ProductItem","item","image","price","quantity","dispatch","useDispatch","cart","useSelector","state","className","to","alt","src","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","initialState","reducer","action","newState","createStore","reducers","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d8b98d1c.chunk.js","sourcesContent":["\n\nexport function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n    \n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function (e) {\n      const db= request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id'});\n      db.createObjectStore('categories', {keyPath: '_id'});\n      db.createObjectStore('cart', {keyPath: '_id'});\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db=request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          }\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY} from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const {cart} = state;\n\n  const addToCart = () => {\n     // find the cart item with the matching id\n  const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n  // if there was a match, call UPDATE with a new purchase quantity\n  if (itemInCart) {\n    dispatch({\n      type: UPDATE_CART_QUANTITY,\n      _id: _id,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n    idbPromise('cart', 'put', {\n      ...itemInCart,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n  } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...item, purchaseQuantity: 1 }\n    });\n    idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n  }\n};\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql `\nquery getCheckout($products: [ID]!) {\n  checkout(products: $products) {\n    session\n  }\n}\n`;\n\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { UPDATE_PRODUCTS} from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductList() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const {currentCategory} = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // sincer we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // user retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        })\n      })\n    }\n  }, [data,loading, dispatch]);\n  \n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n  \n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY} from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const {categories} = state;\n  const {loading, data: categoryData} = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      })\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData,loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;","import React from 'react';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch } from 'react-redux';\n\nconst CartItem = ({item}) => {\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({\n            type: REMOVE_FROM_CART,\n            _id: item._id\n        });\n        idbPromise('cart', 'delete', {...item});\n    };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n\n        if(value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n            idbPromise('cart', 'delete', {...item });\n        } else {\n            dispatch ({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img\n                src={`/images/${item.image}`}\n                alt=\"\"\n                />\n            </div>\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div>\n                    <span>Qty:</span>\n                    <input\n                    type=\"number\"\n                    placeholder=\"1\"\n                    value={item.purchaseQuantity}\n                    onChange={onChange}\n                    />\n                    <span\n                    role='img'\n                    aria-label='trash'\n                    onClick={() => removeFromCart(item)}\n                    >\n                    🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n    const dispatch = useDispatch();\n    const state = useSelector(state => state);\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n        }\n\n        if (!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n    console.log(state);\n\n    function toggleCart() {\n        dispatch({type: TOGGLE_CART});\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n      const productIds = [];\n\n      state.cart.forEach((item) => {\n        for (let i = 0; i < item.purchaseQuantity; i++) {\n          productIds.push(item._id);\n        }\n      })\n\n      getCheckout({\n        variables: { products: productIds}\n      });\n    }\n\n    useEffect(() => {\n      if (data) {\n        stripePromise.then((res) => {\n          res.redirectToCheckout({ sessionId: data.checkout.session });\n        });\n      }\n    }, [data]);\n\n    if(!state.cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span\n                role=\"img\"\n                aria-label=\"trash\">🛒</span>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"cart\">\n            \n            <div className=\"close\" onClick={toggleCart}>[close]</div>\n            <h2>Shopping Cart</h2>\n            \n            {state.cart.length ? (\n    <div>\n      {state.cart.map(item => (\n        <CartItem key={item._id} item={item} />\n      ))}\n      <div className=\"flex-row space-between\">\n        <strong>Total: ${calculateTotal()}</strong>\n        {\n          Auth.loggedIn() ?\n            <button onClick={submitCheckout}>\n              Checkout\n            </button>\n            :\n            <span>(log in to check out)</span>\n        }\n      </div>\n    </div>\n  ) : (\n    <h3>\n      <span role=\"img\" aria-label=\"shocked\">\n        😱\n      </span>\n      You haven't added anything to your cart yet!\n    </h3>\n  )}\n</div>\n    );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n \n\n  return (\n    <div className=\"container\">\n      <CategoryMenu  />\n      <ProductList  />'\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport { UPDATE_PRODUCTS,\n       REMOVE_FROM_CART,\n       UPDATE_CART_QUANTITY,\n       ADD_TO_CART\n       } from '../utils/actions';\nimport Cart from '../components/Cart';\nimport { idbPromise } from '../utils/helpers';\nimport { useDispatch, useSelector} from 'react-redux';\n\n\nfunction Detail() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const {products, cart} = state;\n\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id))\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach((product) => {\n        idbPromise('proucts', 'put', product);\n      })\n    } else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', {...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n    idbPromise('cart', 'delete', {...currentProduct});\n  };\n\n  return (\n    \n<>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button \n            disabled={!cart.find(p => p._id === currentProduct._id)}\n            onClick={removeFromCart}\n            >\n              Remove from Cart\n              </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n      </>\n    \n  );\n}\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React , { useEffect } from 'react';\nimport { useMutation } from '@apollo/client'\nimport Jumbotron from '../components/Jumbotron';\nimport {ADD_ORDER} from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\n\nfunction Success () {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map(item => item._id);\n\n            if ( products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n\n                productData.forEach((item) => {\n                    idbPromise('cart', 'delete', item);\n                })\n            }\n\n            setTimeout(() => {\n            window.location.assign('/');\n        }, 3000)\n    };\n        saveOrder();\n    }, [addOrder]);\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage\n                </h2>\n            </Jumbotron>\n        </div>\n    )\n}\n\nexport default Success;","import {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\nconst initialState = {\n    products: [],\n    categories: [],\n    currentCategory: '',\n    cart: [],\n    cartOpen: false\n}\n\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products ],\n            };\n\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            }\n        \n            // if it's none of these actions, do not update state at all and keep things the same!\n            default:\n                return state;\n    }\n};\n\n\nexport default reducer;\n\n","import { createStore } from 'redux';\nimport reducers from './reducers';\n\nexport default createStore(reducers);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { Provider } from 'react-redux';\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport OrderHistory from './pages/OrderHistory';\nimport Success from './pages/Success';\nimport store from './utils/store';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store} >\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route exact path = '/success' component={Success} />\n            <Route component={NoMatch} />\n          </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}